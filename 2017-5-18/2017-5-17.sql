-- phpMyAdmin SQL Dump
-- version 4.1.14
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: 2017-05-17 15:20:07
-- 服务器版本： 5.6.17
-- PHP Version: 5.5.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `blog`
--

-- --------------------------------------------------------

--
-- 表的结构 `article`
--

CREATE TABLE IF NOT EXISTS `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) NOT NULL,
  `title` varchar(50) NOT NULL,
  `imgURL` varchar(500) NOT NULL,
  `tag` varchar(50) NOT NULL,
  `subTitle` varchar(200) NOT NULL,
  `content` text NOT NULL,
  `createTime` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=15 ;

--
-- 转存表中的数据 `article`
--

INSERT INTO `article` (`id`, `userId`, `title`, `imgURL`, `tag`, `subTitle`, `content`, `createTime`) VALUES
(1, 2, 'Tiny-Blog 接口文档', 'admin/php/upload/ca21bae3836e78cd7bee8ab11b61c8d4.jpg', 'Tiny-Blog', '简洁的博客系统，响应式布局，极简设计风格。UI 采用bootstrap框架，前端页面使用Vue.js 配合原生js撰写，tiny Blog 跨平台简洁之作', '[TOC]\n\n# 登录接口\n\n## login\n\n**请求参数**\n\nhttp://localhost/class/shangraoshifan/2017-5-5/blog/php/user.php?a=login&username=%E6%91%98%E6%98%9F&password=123456\n\n```\n{\n  a: ''login'',\n  username: ''摘星'',\n  password: ''123456'',\n}\n```\n\n## logout\n\nhttp://localhost/class/shangraoshifan/2017-5-5/blog/php/user.php?a=logout\n\n**请求参数**\n```\n{\n  a: ''logout''\n}\n```\n\n**响应数据**\n```\n{"code":2000,"msg":"请先登录"}\n```\n\n\n# 用户接口\n\n## 获取用户列表\n\n**请求参数**\n```\n{\n  a: ''查''\n}\n```\n\nhttp://localhost/class/shangraoshifan/2017-5-5/blog/admin/php/user.php?a=%E6%9F%A5\n\n**响应数据**\n```\n[{\n  "id": "2",\n  "username": "摘星",\n  "email": "674857736@qq.com",\n  "password": "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",\n  "level": "1",\n  "createTime": "1491824387"\n}, {\n  "id": "3",\n  "username": "徐金",\n  "email": "xujin@163.com",\n  "password": "96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e",\n  "level": "1",\n  "createTime": "1491901868"\n}]\n```\n\n\n## 添加用户\n\n\n\n## 删除用户\n\n\n\n## 修改用户\n\n\n\n# 文章接口\n\n## 增\n\n\n\n## 删\n\n\n\n## 改\n\n\n\n## 查\n\n\n\n', 1494058995),
(2, 2, 'marked Markdown解析器', 'admin/php/upload/bfe067f0fb53230b0ca69311a1b33a35.jpg', 'markdown', 'A full-featured markdown parser and compiler, written in JavaScript. Built  for speed.', '# marked\n\n> A full-featured markdown parser and compiler, written in JavaScript. Built\n> for speed.\n\n[![NPM version](https://badge.fury.io/js/marked.png)][badge]\n\n## Install\n\n``` bash\nnpm install marked --save\n```\n\n## Usage\n\nMinimal usage:\n\n```js\nvar marked = require(''marked'');\nconsole.log(marked(''I am using __markdown__.''));\n// Outputs: <p>I am using <strong>markdown</strong>.</p>\n```\n\nExample setting options with default values:\n\n```js\nvar marked = require(''marked'');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false\n});\n\nconsole.log(marked(''I am using __markdown__.''));\n```\n\n### Browser\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset="utf-8"/>\n  <title>Marked in the browser</title>\n  <script src="lib/marked.js"></script>\n</head>\n<body>\n  <div id="content"></div>\n  <script>\n    document.getElementById(''content'').innerHTML =\n      marked(''# Marked in browser\\n\\nRendered by **marked**.'');\n  </script>\n</body>\n</html>\n```\n\n## marked(markdownString [,options] [,callback])\n\n### markdownString\n\nType: `string`\n\nString of markdown source to be compiled.\n\n### options\n\nType: `object`\n\nHash of options. Can also be set using the `marked.setOptions` method as seen\nabove.\n\n### callback\n\nType: `function`\n\nFunction called when the `markdownString` has been fully parsed when using\nasync highlighting. If the `options` argument is omitted, this can be used as\nthe second argument.\n\n## Options\n\n### highlight\n\nType: `function`\n\nA function to highlight code blocks. The first example below uses async highlighting with\n[node-pygmentize-bundled][pygmentize], and the second is a synchronous example using\n[highlight.js][highlight]:\n\n```js\nvar marked = require(''marked'');\n\nvar markdownString = ''```js\\n console.log("hello"); \\n```'';\n\n// Async highlighting with pygmentize-bundled\nmarked.setOptions({\n  highlight: function (code, lang, callback) {\n    require(''pygmentize-bundled'')({ lang: lang, format: ''html'' }, code, function (err, result) {\n      callback(err, result.toString());\n    });\n  }\n});\n\n// Using async version of marked\nmarked(markdownString, function (err, content) {\n  if (err) throw err;\n  console.log(content);\n});\n\n// Synchronous highlighting with highlight.js\nmarked.setOptions({\n  highlight: function (code) {\n    return require(''highlight.js'').highlightAuto(code).value;\n  }\n});\n\nconsole.log(marked(markdownString));\n```\n\n#### highlight arguments\n\n`code`\n\nType: `string`\n\nThe section of code to pass to the highlighter.\n\n`lang`\n\nType: `string`\n\nThe programming language specified in the code block.\n\n`callback`\n\nType: `function`\n\nThe callback function to call when using an async highlighter.\n\n### renderer\n\nType: `object`\nDefault: `new Renderer()`\n\nAn object containing functions to render tokens to HTML.\n\n#### Overriding renderer methods\n\nThe renderer option allows you to render tokens in a custom manner. Here is an\nexample of overriding the default heading token rendering by adding an embedded anchor tag like on GitHub:\n\n```javascript\nvar marked = require(''marked'');\nvar renderer = new marked.Renderer();\n\nrenderer.heading = function (text, level) {\n  var escapedText = text.toLowerCase().replace(/[^\\w]+/g, ''-'');\n\n  return ''<h'' + level + ''><a name="'' +\n                escapedText +\n                 ''" class="anchor" href="#'' +\n                 escapedText +\n                 ''"><span class="header-link"></span></a>'' +\n                  text + ''</h'' + level + ''>'';\n},\n\nconsole.log(marked(''# heading+'', { renderer: renderer }));\n```\nThis code will output the following HTML:\n```html\n<h1>\n  <a name="heading-" class="anchor" href="#heading-">\n    <span class="header-link"></span>\n  </a>\n  heading+\n</h1>\n```\n\n#### Block level renderer methods\n\n- code(*string* code, *string* language)\n- blockquote(*string* quote)\n- html(*string* html)\n- heading(*string* text, *number*  level)\n- hr()\n- list(*string* body, *boolean* ordered)\n- listitem(*string*  text)\n- paragraph(*string* text)\n- table(*string* header, *string* body)\n- tablerow(*string* content)\n- tablecell(*string* content, *object* flags)\n\n`flags` has the following properties:\n\n```js\n{\n    header: true || false,\n    align: ''center'' || ''left'' || ''right''\n}\n```\n\n#### Inline level renderer methods\n\n- strong(*string* text)\n- em(*string* text)\n- codespan(*string* code)\n- br()\n- del(*string* text)\n- link(*string* href, *string* title, *string* text)\n- image(*string* href, *string* title, *string* text)\n\n### gfm\n\nType: `boolean`\nDefault: `true`\n\nEnable [GitHub flavored markdown][gfm].\n\n### tables\n\nType: `boolean`\nDefault: `true`\n\nEnable GFM [tables][tables].\nThis option requires the `gfm` option to be true.\n\n### breaks\n\nType: `boolean`\nDefault: `false`\n\nEnable GFM [line breaks][breaks].\nThis option requires the `gfm` option to be true.\n\n### pedantic\n\nType: `boolean`\nDefault: `false`\n\nConform to obscure parts of `markdown.pl` as much as possible. Don''t fix any of\nthe original markdown bugs or poor behavior.\n\n### sanitize\n\nType: `boolean`\nDefault: `false`\n\nSanitize the output. Ignore any HTML that has been input.\n\n### smartLists\n\nType: `boolean`\nDefault: `true`\n\nUse smarter list behavior than the original markdown. May eventually be\ndefault with the old behavior moved into `pedantic`.\n\n### smartypants\n\nType: `boolean`\nDefault: `false`\n\nUse "smart" typograhic punctuation for things like quotes and dashes.\n\n## Access to lexer and parser\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n## CLI\n\n``` bash\n$ marked -o hello.html\nhello world\n^D\n$ cat hello.html\n<p>hello world</p>\n```\n\n## Philosophy behind marked\n\nThe point of marked was to create a markdown compiler where it was possible to\nfrequently parse huge chunks of markdown without having to worry about\ncaching the compiled output somehow...or blocking for an unnecesarily long time.\n\nmarked is very concise and still implements all markdown features. It is also\nnow fully compatible with the client-side.\n\nmarked more or less passes the official markdown test suite in its\nentirety. This is important because a surprising number of markdown compilers\ncannot pass more than a few tests. It was very difficult to get marked as\ncompliant as it is. It could have cut corners in several areas for the sake\nof performance, but did not in order to be exactly what you expect in terms\nof a markdown rendering. In fact, this is why marked could be considered at a\ndisadvantage in the benchmarks above.\n\nAlong with implementing every markdown feature, marked also implements [GFM\nfeatures][gfmf].\n\n## Benchmarks\n\nnode v0.8.x\n\n``` bash\n$ node test --bench\nmarked completed in 3411ms.\nmarked (gfm) completed in 3727ms.\nmarked (pedantic) completed in 3201ms.\nrobotskirt completed in 808ms.\nshowdown (reuse converter) completed in 11954ms.\nshowdown (new converter) completed in 17774ms.\nmarkdown-js completed in 17191ms.\n```\n\n__Marked is now faster than Discount, which is written in C.__\n\nFor those feeling skeptical: These benchmarks run the entire markdown test suite 1000 times. The test suite tests every feature. It doesn''t cater to specific aspects.\n\n### Pro level\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n``` bash\n$ node\n> require(''marked'').lexer(''> i am using marked.'')\n[ { type: ''blockquote_start'' },\n  { type: ''paragraph'',\n    text: ''i am using marked.'' },\n  { type: ''blockquote_end'' },\n  links: {} ]\n```\n\n## Running Tests & Contributing\n\nIf you want to submit a pull request, make sure your changes pass the test\nsuite. If you''re adding a new feature, be sure to add your own test.\n\nThe marked test suite is set up slightly strangely: `test/new` is for all tests\nthat are not part of the original markdown.pl test suite (this is where your\ntest should go if you make one). `test/original` is only for the original\nmarkdown.pl tests. `test/tests` houses both types of tests after they have been\ncombined and moved/generated by running `node test --fix` or `marked --test\n--fix`.\n\nIn other words, if you have a test to add, add it to `test/new/` and then\nregenerate the tests with `node test --fix`. Commit the result. If your test\nuses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\ncan add `.nogfm` to the filename. So, `my-test.text` becomes\n`my-test.nogfm.text`. You can do this with any marked option. Say you want\nline breaks and smartypants enabled, your filename should be:\n`my-test.breaks.smartypants.text`.\n\nTo run the tests:\n\n``` bash\ncd marked/\nnode test\n```\n\n### Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\nCopyright (c) 2011-2014, Christopher Jeffrey. (MIT License)\n\nSee LICENSE for more info.\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown\n[gfmf]: http://github.github.com/github-flavored-markdown/\n[pygmentize]: https://github.com/rvagg/node-pygmentize-bundled\n[highlight]: https://github.com/isagalaev/highlight.js\n[badge]: http://badge.fury.io/js/marked\n[tables]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\n[breaks]: https://help.github.com/articles/github-flavored-markdown#newlines', 1494059287),
(3, 2, 'Example application for Play+AngularJS+RequireJS', 'admin/php/upload/508dd610482a6a9177c72e611b617517.jpg', 'example', 'This template application shows how to organize your application with [Playframework 2](http://www.playframework.com), [WebJars](http://www.webjars.org), [RequireJS](http://www.requirejs.org) and [Ang', '# Example application for Play+AngularJS+RequireJS.\n\n## Intro\n\nThis template application shows how to organize your application with\n[Playframework 2](http://www.playframework.com), [WebJars](http://www.webjars.org),\n[RequireJS](http://www.requirejs.org) and [AngularJS](http://www.angularjs.org).\n\nIt shows an alternative way of organizing modules than the official\n[Angular-Play-Seed](https://github.com/typesafehub/angular-seed-play).\n\nFor a full explanation, read the following blog post:\nhttp://www.mariussoutier.com/blog/2013/08/25/requirejs-optimization-play-webjars/\n\nThe updates made for Play 2.2 and newer WebJars are explained here:\nhttp://www.mariussoutier.com/blog/2014/03/25/requirejs-optimization-play-2-2-webjars-cdns/\n\nThe changes for Play 2.3 and sbt-web are discussed in this series about sbt-web:\nhttp://mariussoutier.com/blog/2014/10/20/intro-sbt-web/\n\nThe changes for Play 2.4 are summarized in this short summary post:\nhttp://mariussoutier.com/blog/2015/07/25/play-angular-require-seed-updates/\n\nUpdated for Play 2.5 with only a few minor changes.\n\n## Code Organization\n\nThe JavaScript modules are organized as follows:\n\n    |- app\n    |-- assets\n    |--- javascripts    <- contains all the JavaScript/CoffeeScript modules\n    |---- app.js        <- app module, wires everything together\n    |---- main.js       <- tells RequireJS how to load modules and bootstraps the app\n    |---- common/       <- a module, in this case\n    |----- main.js      <- main file of the module, loads all sub-files in this folder\n    |----- filters.js   <- common''s filters\n    |----- directives/  <- common''s directives\n    |----- services/    <- common''s services\n    |---- ...\n\n\n## Trying It Out\n\n### Dev Mode\n\n* Load dependencies via `sbt update`\n* Run via `sbt ~run`\n* Go to [localhost:9000](http://localhost:9000)\n\nThis uses the normal JavaScript files and loads libraries from the downloaded WebJars.\n\n### Prod Mode\n\nRunning:\n\n* Run `sbt testProd`\n\nDeployment:\n\n* Produce executable via `sbt clean dist`\n* Extract `unzip target/universal/play-angular-require-seed-2.x.x.zip`\n* Run `play-angular-require-seed-2.x.x/bin/play-angular-require-seed -Dhttp.port=9000 -Dconfig.resource=prod.conf`\n\n\nThis uses the uglified JavaScript files, versioned and compressed assets, and loads WebJars resources from the jsDelivr CDN.\n\n### Activator\n\nThis application is also published as a Typesafe Activator template:\n\nhttp://typesafe.com/activator/template/play-angular-require-seed\n\nTo use it from Activator, type\n\n~~~bash\n$ activator new <project-name>\n~~~\n\nActivator will now ask you to choose a template:\n\n~~~bash\nBrowse the list of templates: http://typesafe.com/activator/templates\nChoose from these featured templates or enter a template name:\n  1) minimal-java\n  2) minimal-scala\n  3) play-java\n  4) play-scala\n>\n~~~\n\nEnter `play-angular-require-seed` (you can use tab completion).\n\n~~~bash\n> play-angular-require-seed\nOK, application "<project-name>" is being created using the "play-angular-require-seed" template.\n~~~\n\nYour new app is now ready for development. Switch to its directory and run activator or sbt.\n\n~~~bash\n$ cd <project-name>\n$ activator ~run\n~~~', 1494059290),
(4, 2, 'AngularJS 前端快速开发框架', 'admin/php/upload/49a18dd0b226025fd6119664de75e1ff.jpg', 'angular ng scope', 'AngularJS lets you write client-side web applications as if you had a smarter browser.  It lets you use good old HTML (or HAML, Jade/Pug and friends!) as your template language and lets you extend HTM', 'AngularJS [![Build Status](https://travis-ci.org/angular/angular.js.svg?branch=master)](https://travis-ci.org/angular/angular.js)\n=========\n\nAngularJS lets you write client-side web applications as if you had a smarter browser.  It lets you\nuse good old HTML (or HAML, Jade/Pug and friends!) as your template language and lets you extend HTML’s\nsyntax to express your application’s components clearly and succinctly.  It automatically\nsynchronizes data from your UI (view) with your JavaScript objects (model) through 2-way data\nbinding. To help you structure your application better and make it easy to test, AngularJS teaches\nthe browser how to do dependency injection and inversion of control.\n\nIt also helps with server-side communication, taming async callbacks with promises and deferred objects,\nand it makes client-side navigation and deep linking with hashbang urls or HTML5 pushState a\npiece of cake. Best of all? It makes development fun!\n\n* Web site: https://angularjs.org\n* Tutorial: https://docs.angularjs.org/tutorial\n* API Docs: https://docs.angularjs.org/api\n* Developer Guide: https://docs.angularjs.org/guide\n* Contribution guidelines: [CONTRIBUTING.md](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md)\n* Dashboard: https://dashboard.angularjs.org\n\n##### Looking for the new Angular? Go here: https://github.com/angular/angular\n\nBuilding AngularJS\n---------\n[Once you have set up your environment](https://docs.angularjs.org/misc/contribute), just run:\n\n    grunt package\n\n\nRunning tests\n-------------\nTo execute all unit tests, use:\n\n    grunt test:unit\n\nTo execute end-to-end (e2e) tests, use:\n\n    grunt package\n    grunt test:e2e\n\nTo learn more about the grunt tasks, run `grunt --help`\n\nContribute & Develop\n--------------------\n\nWe''ve set up a separate document for our [contribution guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md).\n\n\n[![Analytics](https://ga-beacon.appspot.com/UA-8594346-11/angular.js/README.md?pixel)](https://github.com/igrigorik/ga-beacon)\n\nWhat to use AngularJS for and when to use it\n---------\nAngularJS is the next generation framework where each component is designed to work with every other\ncomponent in an interconnected way like a well-oiled machine. AngularJS is JavaScript MVC made easy\nand done right. (Well it is not really MVC, read on, to understand what this means.)\n\n#### MVC, no, MV* done the right way!\nMVC, short for Model-View-Controller, is a design pattern, i.e. how the code should be organized and\nhow the different parts of an application separated for proper readability and debugging. Model is\nthe data and the database. View is the user interface and what the user sees. Controller is the main\nlink between Model and View. These are the three pillars of major programming frameworks present on\nthe market today. On the other hand AngularJS works on MV*, short for Model-View-_Whatever_. The\n_Whatever_ is AngularJS''s way of telling that you may create any kind of linking between the Model\nand the View here.\n\nUnlike other frameworks in any programming language, where MVC, the three separate components, each\none has to be written and then connected by the programmer, AngularJS helps the programmer by asking\nhim/her to just create these and everything else will be taken care of by AngularJS.\n\n#### Interconnection with HTML at the root level\nAngularJS uses HTML to define the user''s interface. AngularJS also enables the programmer to write\nnew HTML tags (AngularJS Directives) and increase the readability and understandability of the HTML\ncode. Directives are AngularJS’s way of bringing additional functionality to HTML. Directives\nachieve this by enabling us to invent our own HTML elements. This also helps in making the code DRY\n(Don''t Repeat Yourself), which means once created, a new directive can be used anywhere within the\napplication.\n\nHTML is also used to determine the wiring of the app. Special attributes in the HTML determine where\nto load the app, which components or controllers to use for each element, etc. We specify "what"\ngets loaded, but not "how". This declarative approach greatly simplifies app development in a sort\nof WYSIWYG way. Rather than spending time on how the program flows and orchestrating the various\nmoving parts, we simply define what we want and AngularJS will take care of the dependencies.\n\n#### Data Handling made simple\nData and Data Models in AngularJS are plain JavaScript objects and one can add and change properties\ndirectly on it and loop over objects and arrays at will.\n\n#### Two-way Data Binding\nOne of AngularJS''s strongest features. Two-way Data Binding means that if something changes in the\nModel, the change gets reflected in the View instantaneously, and the same happens the other way\naround. This is also referred to as Reactive Programming, i.e. suppose `a = b + c` is being\nprogrammed and after this, if the value of `b` and/or `c` is changed then the value of `a` will be\nautomatically updated to reflect the change. AngularJS uses its "scopes" as a glue between the Model\nand View and makes these updates in one available for the other.\n\n#### Less Written Code and Easily Maintainable Code\nEverything in AngularJS is created to enable the programmer to end up writing less code that is\neasily maintainable and readable by any other new person on the team. Believe it or not, one can\nwrite a complete working two-way data binded application in less than 10 lines of code. Try and see\nfor yourself!\n\n#### Testing Ready\nAngularJS has Dependency Injection, i.e. it takes care of providing all the necessary dependencies\nto its controllers and services whenever required. This helps in making the AngularJS code ready for\nunit testing by making use of mock dependencies created and injected. This makes AngularJS more\nmodular and easily testable thus in turn helping a team create more robust applications.', 1494059293),
(5, 2, 'marked', 'admin/php/upload/47fbe2de58fb0820c6aa5628d6868d8b.jpg', 'marked', 'powerful markdown parser', '# marked\n\n> A full-featured markdown parser and compiler, written in JavaScript. Built\n> for speed.\n\n[![NPM version](https://badge.fury.io/js/marked.png)][badge]\n\n## Install\n\n``` bash\nnpm install marked --save\n```\n\n## Usage\n\nMinimal usage:\n\n```js\nvar marked = require(''marked'');\nconsole.log(marked(''I am using __markdown__.''));\n// Outputs: <p>I am using <strong>markdown</strong>.</p>\n```\n\nExample setting options with default values:\n\n```js\nvar marked = require(''marked'');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false\n});\n\nconsole.log(marked(''I am using __markdown__.''));\n```\n\n### Browser\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset="utf-8"/>\n  <title>Marked in the browser</title>\n  <script src="lib/marked.js"></script>\n</head>\n<body>\n  <div id="content"></div>\n  <script>\n    document.getElementById(''content'').innerHTML =\n      marked(''# Marked in browser\\n\\nRendered by **marked**.'');\n  </script>\n</body>\n</html>\n```\n\n## marked(markdownString [,options] [,callback])\n\n### markdownString\n\nType: `string`\n\nString of markdown source to be compiled.\n\n### options\n\nType: `object`\n\nHash of options. Can also be set using the `marked.setOptions` method as seen\nabove.\n\n### callback\n\nType: `function`\n\nFunction called when the `markdownString` has been fully parsed when using\nasync highlighting. If the `options` argument is omitted, this can be used as\nthe second argument.\n\n## Options\n\n### highlight\n\nType: `function`\n\nA function to highlight code blocks. The first example below uses async highlighting with\n[node-pygmentize-bundled][pygmentize], and the second is a synchronous example using\n[highlight.js][highlight]:\n\n```js\nvar marked = require(''marked'');\n\nvar markdownString = ''```js\\n console.log("hello"); \\n```'';\n\n// Async highlighting with pygmentize-bundled\nmarked.setOptions({\n  highlight: function (code, lang, callback) {\n    require(''pygmentize-bundled'')({ lang: lang, format: ''html'' }, code, function (err, result) {\n      callback(err, result.toString());\n    });\n  }\n});\n\n// Using async version of marked\nmarked(markdownString, function (err, content) {\n  if (err) throw err;\n  console.log(content);\n});\n\n// Synchronous highlighting with highlight.js\nmarked.setOptions({\n  highlight: function (code) {\n    return require(''highlight.js'').highlightAuto(code).value;\n  }\n});\n\nconsole.log(marked(markdownString));\n```\n\n#### highlight arguments\n\n`code`\n\nType: `string`\n\nThe section of code to pass to the highlighter.\n\n`lang`\n\nType: `string`\n\nThe programming language specified in the code block.\n\n`callback`\n\nType: `function`\n\nThe callback function to call when using an async highlighter.\n\n### renderer\n\nType: `object`\nDefault: `new Renderer()`\n\nAn object containing functions to render tokens to HTML.\n\n#### Overriding renderer methods\n\nThe renderer option allows you to render tokens in a custom manner. Here is an\nexample of overriding the default heading token rendering by adding an embedded anchor tag like on GitHub:\n\n```javascript\nvar marked = require(''marked'');\nvar renderer = new marked.Renderer();\n\nrenderer.heading = function (text, level) {\n  var escapedText = text.toLowerCase().replace(/[^\\w]+/g, ''-'');\n\n  return ''<h'' + level + ''><a name="'' +\n                escapedText +\n                 ''" class="anchor" href="#'' +\n                 escapedText +\n                 ''"><span class="header-link"></span></a>'' +\n                  text + ''</h'' + level + ''>'';\n},\n\nconsole.log(marked(''# heading+'', { renderer: renderer }));\n```\nThis code will output the following HTML:\n```html\n<h1>\n  <a name="heading-" class="anchor" href="#heading-">\n    <span class="header-link"></span>\n  </a>\n  heading+\n</h1>\n```\n\n#### Block level renderer methods\n\n- code(*string* code, *string* language)\n- blockquote(*string* quote)\n- html(*string* html)\n- heading(*string* text, *number*  level)\n- hr()\n- list(*string* body, *boolean* ordered)\n- listitem(*string*  text)\n- paragraph(*string* text)\n- table(*string* header, *string* body)\n- tablerow(*string* content)\n- tablecell(*string* content, *object* flags)\n\n`flags` has the following properties:\n\n```js\n{\n    header: true || false,\n    align: ''center'' || ''left'' || ''right''\n}\n```\n\n#### Inline level renderer methods\n\n- strong(*string* text)\n- em(*string* text)\n- codespan(*string* code)\n- br()\n- del(*string* text)\n- link(*string* href, *string* title, *string* text)\n- image(*string* href, *string* title, *string* text)\n\n### gfm\n\nType: `boolean`\nDefault: `true`\n\nEnable [GitHub flavored markdown][gfm].\n\n### tables\n\nType: `boolean`\nDefault: `true`\n\nEnable GFM [tables][tables].\nThis option requires the `gfm` option to be true.\n\n### breaks\n\nType: `boolean`\nDefault: `false`\n\nEnable GFM [line breaks][breaks].\nThis option requires the `gfm` option to be true.\n\n### pedantic\n\nType: `boolean`\nDefault: `false`\n\nConform to obscure parts of `markdown.pl` as much as possible. Don''t fix any of\nthe original markdown bugs or poor behavior.\n\n### sanitize\n\nType: `boolean`\nDefault: `false`\n\nSanitize the output. Ignore any HTML that has been input.\n\n### smartLists\n\nType: `boolean`\nDefault: `true`\n\nUse smarter list behavior than the original markdown. May eventually be\ndefault with the old behavior moved into `pedantic`.\n\n### smartypants\n\nType: `boolean`\nDefault: `false`\n\nUse "smart" typograhic punctuation for things like quotes and dashes.\n\n## Access to lexer and parser\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n## CLI\n\n``` bash\n$ marked -o hello.html\nhello world\n^D\n$ cat hello.html\n<p>hello world</p>\n```\n\n## Philosophy behind marked\n\nThe point of marked was to create a markdown compiler where it was possible to\nfrequently parse huge chunks of markdown without having to worry about\ncaching the compiled output somehow...or blocking for an unnecesarily long time.\n\nmarked is very concise and still implements all markdown features. It is also\nnow fully compatible with the client-side.\n\nmarked more or less passes the official markdown test suite in its\nentirety. This is important because a surprising number of markdown compilers\ncannot pass more than a few tests. It was very difficult to get marked as\ncompliant as it is. It could have cut corners in several areas for the sake\nof performance, but did not in order to be exactly what you expect in terms\nof a markdown rendering. In fact, this is why marked could be considered at a\ndisadvantage in the benchmarks above.\n\nAlong with implementing every markdown feature, marked also implements [GFM\nfeatures][gfmf].\n\n## Benchmarks\n\nnode v0.8.x\n\n``` bash\n$ node test --bench\nmarked completed in 3411ms.\nmarked (gfm) completed in 3727ms.\nmarked (pedantic) completed in 3201ms.\nrobotskirt completed in 808ms.\nshowdown (reuse converter) completed in 11954ms.\nshowdown (new converter) completed in 17774ms.\nmarkdown-js completed in 17191ms.\n```\n\n__Marked is now faster than Discount, which is written in C.__\n\nFor those feeling skeptical: These benchmarks run the entire markdown test suite 1000 times. The test suite tests every feature. It doesn''t cater to specific aspects.\n\n### Pro level\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n``` bash\n$ node\n> require(''marked'').lexer(''> i am using marked.'')\n[ { type: ''blockquote_start'' },\n  { type: ''paragraph'',\n    text: ''i am using marked.'' },\n  { type: ''blockquote_end'' },\n  links: {} ]\n```\n\n## Running Tests & Contributing\n\nIf you want to submit a pull request, make sure your changes pass the test\nsuite. If you''re adding a new feature, be sure to add your own test.\n\nThe marked test suite is set up slightly strangely: `test/new` is for all tests\nthat are not part of the original markdown.pl test suite (this is where your\ntest should go if you make one). `test/original` is only for the original\nmarkdown.pl tests. `test/tests` houses both types of tests after they have been\ncombined and moved/generated by running `node test --fix` or `marked --test\n--fix`.\n\nIn other words, if you have a test to add, add it to `test/new/` and then\nregenerate the tests with `node test --fix`. Commit the result. If your test\nuses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\ncan add `.nogfm` to the filename. So, `my-test.text` becomes\n`my-test.nogfm.text`. You can do this with any marked option. Say you want\nline breaks and smartypants enabled, your filename should be:\n`my-test.breaks.smartypants.text`.\n\nTo run the tests:\n\n``` bash\ncd marked/\nnode test\n```\n\n### Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\nCopyright (c) 2011-2014, Christopher Jeffrey. (MIT License)\n\nSee LICENSE for more info.\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown\n[gfmf]: http://github.github.com/github-flavored-markdown/\n[pygmentize]: https://github.com/rvagg/node-pygmentize-bundled\n[highlight]: https://github.com/isagalaev/highlight.js\n[badge]: http://badge.fury.io/js/marked\n[tables]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\n[breaks]: https://help.github.com/articles/github-flavored-markdown#newlines', 1494120553),
(13, 2, 'iently update and render just the right components', 'admin/php/upload/0b466cc6d5fe790c776e2113a99b6cad.jpg', 'php mysqli', 'iently update and render just the right components when your data changes. D', '# [React](https://facebook.github.io/react/) &middot; [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![Build Status](https://img.shields.io/travis/facebook/react/master.svg?style=flat)](https://travis-ci.org/facebook/react) [![Coverage Status](https://img.shields.io/coveralls/facebook/react/master.svg?style=flat)](https://coveralls.io/github/facebook/react?branch=master) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md#pull-requests)\n\nReact is a JavaScript library for building user interfaces.\n\n* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.\n* **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.\n* **Learn Once, Write Anywhere:** We don''t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://facebook.github.io/react-native/).\n\n[Learn how to use React in your own project](https://facebook.github.io/react/docs/getting-started.html).\n\n## Examples\n\nWe have several examples [on the website](https://facebook.github.io/react/). Here is the first one to get you started:\n\n```jsx\nclass HelloMessage extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name="John" />,\n  document.getElementById(''container'')\n);\n```\n\nThis example will render "Hello John" into a container on the page.\n\nYou''ll notice that we used an HTML-like syntax; [we call it JSX](https://facebook.github.io/react/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. We recommend using [Babel](https://babeljs.io/) with a [React preset](https://babeljs.io/docs/plugins/preset-react/) to convert JSX into native JavaScript for browsers to digest.\n\n## Installation\n\nReact is available as the `react` package on [npm](https://www.npmjs.com/). It is also available on a [CDN](https://facebook.github.io/react/docs/installation.html#using-a-cdn).\n\nReact is flexible and can be used in a variety of projects. You can create new apps with it, but you can also gradually introduce it into an existing codebase without doing a rewrite.\n\nThe recommended way to install React depends on your project. Here you can find short guides for the most common scenarios:\n\n* [Trying Out React](https://facebook.github.io/react/docs/installation.html#trying-out-react)\n* [Creating a New Application](https://facebook.github.io/react/docs/installation.html#creating-a-new-application)\n* [Adding React to an Existing Application](https://facebook.github.io/react/docs/installation.html#adding-react-to-an-existing-application)\n\n## Contributing\n\nThe main purpose of this repository is to continue to evolve React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.\n\n### [Code of Conduct](https://code.facebook.com/codeofconduct)\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.facebook.com/codeofconduct) so that you can understand what actions will and will not be tolerated.\n\n### Contributing Guide\n\nRead our [contributing guide](https://facebook.github.io/react/contributing/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.\n\n### Beginner Friendly Bugs\n\nTo help you get your feet wet and get you familiar with our contribution process, we have a list of [beginner friendly bugs](https://github.com/facebook/react/labels/Difficulty%3A%20beginner) that contain bugs which are fairly easy to fix. This is a great place to get started.\n\n### License\n\nReact is [BSD licensed](./LICENSE). We also provide an additional [patent grant](./PATENTS).\n\nReact documentation is [Creative Commons licensed](./LICENSE-docs).\n\nExamples provided in this repository and in the documentation are [separately licensed](./LICENSE-examples).', 1494127485),
(14, 2, 'aaaa', 'admin/php/upload/2e40d4ca3ce76b6a6a67c010818d4eea.jpg', 'html5 css3', 'aaaaaa', '\n\n我爱罗 tokyo\n\nsome one \n\nyamiedie', 1494138998);

-- --------------------------------------------------------

--
-- 表的结构 `demo`
--

CREATE TABLE IF NOT EXISTS `demo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userId` int(11) NOT NULL,
  `title` varchar(50) NOT NULL,
  `tag` varchar(50) NOT NULL,
  `imgURL` varchar(500) NOT NULL,
  `subTitle` varchar(200) NOT NULL,
  `url` varchar(400) NOT NULL,
  `createTime` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=24 ;

--
-- 转存表中的数据 `demo`
--

INSERT INTO `demo` (`id`, `userId`, `title`, `tag`, `imgURL`, `subTitle`, `url`, `createTime`) VALUES
(15, 2, '小米官网', '游戏 贪食蛇 ', 'admin/php/upload/49a18dd0b226025fd6119664de75e1ff.jpg', '使用html css javascript 撰写的js小游戏，采用纯原生js编写，色彩丰富，操作简单，老少皆宜', 'demo/xiaomi/', 1494141974),
(16, 2, '贪食蛇', '扫雷 canvas', 'admin/php/upload/2e40d4ca3ce76b6a6a67c010818d4eea.jpg', '专业扫雷是一款拥有更加丰富的难度级别,更加多样的扫雷试图,更加专业的扫雷游戏。你可能已经是一个扫雷高手,但是你想尝试这款能这款定制扫雷地图,拥有更加多元化花样', 'demo/snake.html', 1494142125),
(17, 2, '画圈圈', '放烟花 html5', 'admin/php/upload/49a18dd0b226025fd6119664de75e1ff.jpg', '安全无毒，完全免费，适合-1到无穷大弱智儿童', 'demo/circle.html', 1494142167),
(18, 1, '日历插件', 'aaaaaaaa', 'admin/php/upload/d68b31e99b5479451b07fb0e8f9bb1b9.jpg', 'aaa', 'demo/Calendar-plugin/Calendar-plugin.html', 1494992026),
(19, 1, '3D 矩阵', 'aaaaaaaa', 'admin/php/upload/bfe067f0fb53230b0ca69311a1b33a35.jpg', 'aaaaa', 'demo/cool/index3d.html', 1494992087),
(20, 1, '跳动的硬币', 'aaaaa', 'admin/php/upload/d68b31e99b5479451b07fb0e8f9bb1b9.jpg', 'aaaaa', 'demo/corn', 1494992123),
(21, 1, '九宫格', 'aaaaaa', 'admin/php/upload/2e40d4ca3ce76b6a6a67c010818d4eea.jpg', 'aaa', 'demo/GongGe', 1494992179),
(22, 1, '图片浏览插件', 'aaaaaaa', 'admin/php/upload/2e40d4ca3ce76b6a6a67c010818d4eea.jpg', 'aaaa', 'demo/Image browsing plug-in/FreeView-jq.html', 1494992214),
(23, 1, '3D全景图', 'aaaaaaaaa', 'admin/php/upload/0b466cc6d5fe790c776e2113a99b6cad.jpg', 'aaaaa', 'admin/php/upload/0b466cc6d5fe790c776e2113a99b6cad.jpg', 1494992279);

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(10) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` char(64) NOT NULL,
  `level` tinyint(4) NOT NULL DEFAULT '1',
  `createTime` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=16 ;

--
-- 转存表中的数据 `user`
--

INSERT INTO `user` (`id`, `username`, `email`, `password`, `level`, `createTime`) VALUES
(1, '摘星', '摘星@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(2, '徐金', '徐金@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(3, '占丹红', '占丹红@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(4, '郭靖', '郭靖@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(5, '胡竹林', '胡竹林@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(6, '崔慧明', '崔慧明@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(7, '邓林源', '邓林源@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(8, '刘辰', '刘辰@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(9, '郑蓉蓉', '郑蓉蓉@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(10, '罗珣', '罗珣@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(11, '毕阳', '毕阳@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(12, '邱梦莹', '邱梦莹@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(13, '王闻天', '王闻天@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(14, '贾宇康', '贾宇康@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695),
(15, '王杰', '王杰@qq.com', '96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e', 9, 1495014695);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
